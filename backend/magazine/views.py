from rest_framework import viewsets, permissions, status
from rest_framework.decorators import api_view, action
from rest_framework.response import Response
from django.contrib.auth.models import User
from .models import StudentProfile, Post, Like, Comment, Category
from .serializers import *

# FIXED: Helper function to get or create student profile
def get_or_create_student_profile(user):
    try:
        profile = StudentProfile.objects.get(user=user)
        print(f"✅ Found existing profile for {user.username}")
        return profile
    except StudentProfile.DoesNotExist:
        print(f"🆕 Creating new profile for {user.username}")
        # Auto-create profile for existing users with auto-generated student_id
        profile = StudentProfile.objects.create(
            user=user,
            bio=f"Creative student at Campus Creatives",  # Add default bio
            is_verified=True  # Auto-verify for testing
        )
        # student_id will be auto-generated by the save() method
        return profile

@api_view(['POST'])
def register_user(request):
    try:
        username = request.data.get('username')
        password = request.data.get('password')
        email = request.data.get('email')
        student_id = request.data.get('student_id')
        
        print(f"🆕 Registering user: {username}")
        
        # Check if username already exists
        if User.objects.filter(username=username).exists():
            return Response({'error': 'Username already exists'}, status=status.HTTP_400_BAD_REQUEST)
        
        # Create user
        user = User.objects.create_user(
            username=username, 
            password=password, 
            email=email
        )
        
        # Create student profile
        profile = StudentProfile.objects.create(
            user=user, 
            student_id=student_id,  # Optional now
            bio=request.data.get('bio', 'Creative student at Campus Creatives'),
            is_verified=False
        )
        
        print(f"✅ User {username} registered successfully")
        
        return Response({
            'message': 'User registered successfully! Wait for admin verification.',
            'user_id': user.id,
            'username': user.username
        })
    except Exception as e:
        print(f"❌ Registration error: {str(e)}")
        return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

class StudentProfileViewSet(viewsets.ModelViewSet):
    queryset = StudentProfile.objects.all()
    serializer_class = StudentProfileSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    @action(detail=False, methods=['get'])
    def me(self, request):
        profile = get_or_create_student_profile(request.user)
        serializer = self.get_serializer(profile)
        return Response(serializer.data)

class PostViewSet(viewsets.ModelViewSet):
    queryset = Post.objects.all().order_by('-created_at')
    serializer_class = PostSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_serializer_context(self):
        """
        """
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def create(self, request, *args, **kwargs):
        """
        FIXED: Enhanced create method with comprehensive debugging
        """
        try:
            print("=" * 60)
            print("🔄 POST CREATE REQUEST RECEIVED")
            print("=" * 60)
            
            # Debug request data
            print("📨 Request DATA keys:", list(request.data.keys()))
            print("📁 Request FILES keys:", list(request.FILES.keys()))
            print("📸 Image in FILES:", request.FILES.get('image'))
            print("🔐 Authenticated User:", request.user.username if request.user.is_authenticated else "Anonymous")
            print("🌐 Content-Type:", request.content_type)
            print("📝 Post data preview:")
            print("   - Title:", request.data.get('title', 'Not provided'))
            print("   - Content length:", len(request.data.get('content', '')))
            print("   - Post type:", request.data.get('post_type', 'Not provided'))
            
            # Check if image is actually received
            if 'image' in request.FILES:
                image_file = request.FILES['image']
                print("✅ IMAGE RECEIVED SUCCESSFULLY!")
                print("   📁 File name:", image_file.name)
                print("   📊 File size:", image_file.size, "bytes")
                print("   🎨 File type:", image_file.content_type)
                print("   🔍 File object:", type(image_file))
            else:
                print("❌ NO IMAGE IN FILES")
                print("   🔍 Available files in FILES:", list(request.FILES.keys()))
                print("   🔍 Available keys in DATA:", list(request.data.keys()))
            
            # Call parent create method
            response = super().create(request, *args, **kwargs)
            
            print("✅ CREATE RESPONSE:")
            print("   📊 Status:", response.status_code)
            if response.status_code == 201:
                print("   🎉 Post created successfully!")
                if 'image' in response.data and response.data['image']:
                    print("   🖼️ Image URL in response:", response.data['image'])
                else:
                    print("   ❌ No image URL in response")
            else:
                print("   ⚠️ Response data:", response.data)
            
            return response
            
        except Exception as e:
            print("❌ CREATE ERROR DETAILS:")
            print("   💥 Error message:", str(e))
            import traceback
            print("   📋 Stack trace:")
            traceback.print_exc()
            return Response({'error': str(e), 'details': 'Check server logs for more information'}, 
                          status=status.HTTP_400_BAD_REQUEST)

    def perform_create(self, serializer):
        """
        FIXED: Enhanced perform_create with detailed debugging
        """
        print("=" * 40)
        print("🔄 PERFORM_CREATE STARTED")
        print("=" * 40)
        
        print(f"👤 User: {self.request.user.username}")
        
        # Get or create student profile
        profile = get_or_create_student_profile(self.request.user)
        
        print(f"📇 Using profile: {profile.student_id}")
        print(f"✅ Verified status: {profile.is_verified}")
        
        if not profile.is_verified:
            error_msg = 'Only verified students can create posts'
            print(f"❌ VERIFICATION ERROR: {error_msg}")
            raise Exception(error_msg)
        
        # Check what data we're saving
        print("📝 Serializer validated data keys:", list(serializer.validated_data.keys()))
        if 'image' in serializer.validated_data:
            image_data = serializer.validated_data['image']
            print("🖼️ Image in validated_data:")
            print("   📁 Name:", getattr(image_data, 'name', 'No name'))
            print("   📊 Size:", getattr(image_data, 'size', 'No size'))
            print("   🎨 Type:", getattr(image_data, 'content_type', 'No type'))
        else:
            print("❌ No image in validated_data")
        
        # Save the post
        print("💾 Saving post...")
        post = serializer.save(author=profile)
        
        print("🎉 POST CREATION COMPLETE")
        print(f"   📝 Title: {post.title}")
        print(f"   🆔 ID: {post.id}")
        print(f"   📅 Created: {post.created_at}")
        
        # Check if image was saved
        if post.image:
            print("🖼️ IMAGE SAVED SUCCESSFULLY!")
            print(f"   📁 Image field: {post.image}")
            print(f"   🌐 Image URL: {post.image.url}")
            print(f"   📁 Image path: {post.image.path}")
        else:
            print("❌ NO IMAGE SAVED TO POST")
        
        print("=" * 40)

    @action(detail=True, methods=['post'])
    def like(self, request, pk=None):
        """
        FIXED: Like/unlike a post
        """
        try:
            post = self.get_object()
            profile = get_or_create_student_profile(request.user)
            
            print(f"❤️ Like action - Post: {post.title}, User: {request.user.username}")
            
            like, created = Like.objects.get_or_create(post=post, user=profile)
            if not created:
                like.delete()
                print(f"💔 Post unliked - Total likes: {post.likes.count()}")
                return Response({
                    'status': 'unliked', 
                    'likes_count': post.likes.count(),
                    'message': 'Post unliked successfully'
                })
            
            print(f"💖 Post liked - Total likes: {post.likes.count()}")
            return Response({
                'status': 'liked', 
                'likes_count': post.likes.count(),
                'message': 'Post liked successfully'
            })
            
        except Exception as e:
            print(f"❌ Like error: {str(e)}")
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['post'])
    def comment(self, request, pk=None):
        """
        FIXED: Add comment to a post
        """
        try:
            post = self.get_object()
            profile = get_or_create_student_profile(request.user)
            
            content = request.data.get('content', '').strip()
            if not content:
                return Response({'error': 'Comment content cannot be empty'}, 
                              status=status.HTTP_400_BAD_REQUEST)
            
            print(f"💬 Comment action - Post: {post.title}, User: {request.user.username}")
            print(f"   📝 Comment content: {content[:50]}...")
            
            comment = Comment.objects.create(
                post=post,
                author=profile,
                content=content
            )
            
            serializer = CommentSerializer(comment)
            print(f"✅ Comment created - ID: {comment.id}")
            
            return Response(serializer.data)
            
        except Exception as e:
            print(f"❌ Comment error: {str(e)}")
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['get'])
    def comments(self, request, pk=None):
        """
        FIXED: Get all comments for a post
        """
        try:
            post = self.get_object()
            comments = post.comments.all().order_by('-created_at')
            serializer = CommentSerializer(comments, many=True)
            
            print(f"📋 Fetching comments for post: {post.title}")
            print(f"   📊 Total comments: {comments.count()}")
            
            return Response(serializer.data)
            
        except Exception as e:
            print(f"❌ Get comments error: {str(e)}")
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

class CommentViewSet(viewsets.ModelViewSet):
    queryset = Comment.objects.all()
    serializer_class = CommentSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_serializer_context(self):
        """
        FIXED: Pass request context to serializer
        """
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def perform_create(self, serializer):
        """
        FIXED: Enhanced comment creation with debugging
        """
        try:
            profile = get_or_create_student_profile(self.request.user)
            print(f"💬 Creating comment - User: {self.request.user.username}")
            
            comment = serializer.save(author=profile)
            print(f"✅ Comment created - ID: {comment.id}, Post: {comment.post.title}")
            
        except Exception as e:
            print(f"❌ Comment creation error: {str(e)}")
            raise e

    def create(self, request, *args, **kwargs):
        """
        FIXED: Enhanced comment creation with validation
        """
        try:
            content = request.data.get('content', '').strip()
            if not content:
                return Response({'error': 'Comment content cannot be empty'}, 
                              status=status.HTTP_400_BAD_REQUEST)
            
            return super().create(request, *args, **kwargs)
            
        except Exception as e:
            print(f"❌ Comment create error: {str(e)}")
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
